/*import { createApp } from 'vue'
import { createPinia } from 'pinia'
import App from './App.vue'
import router from './router'
import './assets/index.css' // <-- Import du fichier CSS avec les directives Tailwind

// Importe ton store d'authentification
import { useAuthStore } from './stores/auth' // ‚≠ê Assure-toi que ce chemin est correct : './stores/auth' ‚≠ê

import Menu from './components/Menu.vue'

// Cr√©e l'instance de ton application Vue
const app = createApp(App)

// Enregistre le composant globalement
app.component('Menu', Menu)

// Utilise Pinia pour la gestion de l'√©tat
app.use(createPinia()) // Pinia - Ta fa√ßon originale d'utiliser Pinia

// ‚≠ê CONFIGURATION ASYNCHRONE POUR L'AUTHENTIFICATION ‚≠ê
// Nous devons effectuer le chargement asynchrone de l'utilisateur avant que le routeur ne s'initialise compl√®tement.
// Nous allons ex√©cuter cette fonction asynchrone imm√©diatement.
;(async () => {
  // R√©cup√®re l'instance du store d'authentification *apr√®s* que Pinia ait √©t√© install√© sur l'application
  const authStore = useAuthStore()
  await authStore.loadUserFromToken() // Attend le chargement des donn√©es utilisateur

  // Une fois que la configuration asynchrone de l'authentification est termin√©e,
  // nous pouvons proc√©der avec le reste de la configuration de l'application, comme c'√©tait avant.

  // Utilise Vue Router pour la navigation
  app.use(router) // Vue Router - Cette ligne √©tait d√©j√† l√† dans ton code d'origine

  // Monte l'application sur le DOM
  app.mount('#app') // Cette ligne √©tait aussi d√©j√† l√†
})()*/

/*
import { createApp } from 'vue'
import { createPinia } from 'pinia'
import App from './App.vue'
import router from './router'
import './assets/index.css' // <-- Import du fichier CSS avec les directives Tailwind

// Importe ton store d'authentification
import { useAuthStore } from './stores/auth' // ‚≠ê Assure-toi que ce chemin est correct : './stores/auth' ‚≠ê

import Menu from './components/Menu.vue'

// Cr√©e l'instance de ton application Vue
const app = createApp(App)

// Enregistre le composant globalement
app.component('Menu', Menu)

// Utilise Pinia pour la gestion de l'√©tat
app.use(createPinia()) // Pinia - Ta fa√ßon originale d'utiliser Pinia

// ‚≠ê CONFIGURATION ASYNCHRONE POUR L'AUTHENTIFICATION ‚≠ê
// Nous devons effectuer le chargement asynchrone de l'utilisateur avant que le routeur ne s'initialise compl√®tement.
// Nous allons ex√©cuter cette fonction asynchrone imm√©diatement.
;(async () => {
  // R√©cup√®re l'instance du store d'authentification *apr√®s* que Pinia ait √©t√© install√© sur l'application
  const authStore = useAuthStore()
  await authStore.loadUserFromToken() // Attend le chargement des donn√©es utilisateur

  // Une fois que la configuration asynchrone de l'authentification est termin√©e,
  // nous pouvons proc√©der avec le reste de la configuration de l'application, comme c'√©tait avant.

  // Utilise Vue Router pour la navigation
  app.use(router) // Vue Router - Cette ligne √©tait d√©j√† l√† dans ton code d'origine

  // Monte l'application sur le DOM
  app.mount('#app') // Cette ligne √©tait aussi d√©j√† l√†
})() // L'IIFE (Immediately Invoked Function Expression) se termine ici*/



import { createApp } from 'vue'
import { createPinia } from 'pinia'
import App from './App.vue'
import router from './router'
import './assets/index.css' // Tailwind CSS
import axios from 'axios'

// Store d'authentification
import { useAuthStore } from './stores/auth'
import Menu from './components/Menu.vue'

const app = createApp(App)

// Composant global
app.component('Menu', Menu)

// State manager
app.use(createPinia())

// üîí INTERCEPTEUR GLOBAL AXIOS POUR G√âRER LES ERREURS 401/403
axios.interceptors.response.use(
  response => response,
  error => {
    const authStore = useAuthStore()

    // V√©rifie si la requ√™te concernait le login (ou adapte le chemin selon ton API)
    const isLoginRoute = error.config?.url?.includes('/login')

    if (!isLoginRoute && error.response && (error.response.status === 401 || error.response.status === 403)) {
      console.warn('‚ö†Ô∏è Acc√®s non autoris√© d√©tect√©, d√©connexion automatique.')
      authStore.logout()

      // Redirection vers la page login
      window.location.href = '/login' 
      // Si tu pr√©f√®res router.push('/login'), il faudra importer router et utiliser √ßa √† la place
    }

    return Promise.reject(error)
  }
)

;(async () => {
  // üîÑ Rechargement du token utilisateur depuis le localStorage
  const authStore = useAuthStore()
  await authStore.loadUserFromToken()

  // ‚úÖ Injecte le token dans Axios si pr√©sent
  if (authStore.token) {
    axios.defaults.headers.common['Authorization'] = `Bearer ${authStore.token}`
  }

  // Lancement de l'app une fois que l'auth est pr√™te
  app.use(router)
  app.mount('#app')
})()
